{"version":3,"sources":["features/Grouping/Word.js","features/Import/ImportWords.js","features/BoundedContexts/BoundedContext.js","features/BoundedContexts/NewContext.js","features/BoundedContexts/BoundedContextList.js","features/Import/ImportFileDropzone.js","features/Toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","dragStateFromLocalStorage","JSON","parse","localStorage","getItem","word","id","_useState","useState","_useState2","Object","slicedToArray","dragState","setDragState","color","_useState3","_useState4","backgroundColor","setBackgroundColor","useEffect","dragStateJson","stringify","setItem","dragHandlers","onDrag","e","position","x","y","objectSpread","posX","posY","onStop","window","ga","xPos","yPos","react_default","a","createElement","react_draggable_default","assign","className","style","padding","onDoubleClick","onClick","currentContext","text","ImportWords","addPhraseToVocabulary","importedLines","trim","length","has","set","isImportWordsDialogVisible","href","rel","target","width","rows","document","getElementById","value","Map","split","map","match","exec","size","words","forEach","v","k","push","uuidv4","count","setWords","setIsImportWordsDialogVisible","setIsContextListVisible","Fragment","BoundedContext","context","toggleIsCurrentContext","name","setCurrentContext","NewContext","getRandomColor","i","Math","floor","random","marginRight","contextNameInput","trimmedContextName","newContext","createNewBoundedContext","BoundedContextList","contextsFromLocalStorage","contexts","setContexts","contextJson","isContextListVisible","display","NewContext_NewContext","concat","toConsumableArray","BoundedContextList_OnboardingInstructions","BoundedContext_BoundedContext","key","OnboardingInstructions","ImportFileDropzone","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","item","location","reload","file","readAsBinaryString","_useDropzone","useDropzone","getRootProps","getInputProps","isFileImportVisible","Toolbar","retVal","confirm","clear","toggleImportFileDragAreaVisible","projectJson","fileName","prompt","includes","content","contentType","Blob","type","URL","createObjectURL","download","click","App","wordsFromLocalStorage","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","setIsFileImportVisible","wordsJson","height","src","alt","data-recalc-dims","Toolbar_Toolbar_Toolbar","paddingLeft","paddingRight","BoundedContextList_BoundedContextList","ImportFileDropzone_ImportFileDropzone","Word_Word","ImportWords_ImportWords","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b669b7b4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Draggable from 'react-draggable';\n\nexport const Word = (props) => {\n  const dragStateFromLocalStorage = JSON.parse(localStorage.getItem(props.word.id))\n  const [dragState, setDragState] = useState(dragStateFromLocalStorage || {})\n\n  const color = dragState.color ? dragState.color : \"white\"\n  const [backgroundColor, setBackgroundColor] = useState(color)\n\n  const onDrag = (e, position) => {\n    const { x, y } = position;\n    setDragState({ ...dragState, posX: x, posY: y, word: props })\n  }\n\n  const onStop = (e, position) => {\n    window.ga('send', 'event', 'Phrase', 'Moved');\n  }\n\n  useEffect(() => {\n    const dragStateJson = JSON.stringify(dragState);\n    localStorage.setItem(props.word.id, dragStateJson);\n  }, [dragState, props.word.id]);\n\n  const dragHandlers = { onDrag: onDrag, onStop: onStop };\n\n  const xPos = dragState.posX ? dragState.posX : 0\n  const yPos = dragState.posY ? dragState.posY : 0\n\n  const colorizeWithColorOfBoundedContext = () => {\n    if (props.currentContext) {\n      setBackgroundColor(props.currentContext.color);\n      setDragState({ ...dragState, color: props.currentContext.color });\n      window.ga('send', 'event', 'Phrase', 'AddedToContext');\n    }\n  };\n  \n  const resetToDefaultColor = () => {\n    const defaultColor = \"white\";\n    setBackgroundColor(defaultColor);\n    setDragState({ ...dragState, color: defaultColor.color });\n    window.ga('send', 'event', 'Phrase', 'RemovedFromContext');\n  };\n\n  return (<Draggable\n    {...dragHandlers}\n    position={{ x: xPos, y: yPos }}\n  >\n    <div\n      className=\"vocabulary\"\n      style={{ backgroundColor: backgroundColor, color: \"black\", padding: \"3px\" }}\n      onDoubleClick={resetToDefaultColor}\n\n      onClick={colorizeWithColorOfBoundedContext\n      }\n    >{props.word.text}</div>\n  </Draggable>);\n};\n","import React from 'react';\nimport uuidv4 from 'uuid/v4';\nimport './ImportWords.css';\n\nexport const ImportWords = (props) => {\n    window.ga('set', 'page', '/source-text-input-page');\n    window.ga('send', 'pageview');\n\n    const generateVocabulary = () => {\n        const text = document.getElementById(\"sourceText\").value;\n        let importedLines = new Map();\n        text.split(\"\\n\").map((word) => {\n            const myRegexp = /^(\\d*):(.*)/;\n            const match = myRegexp.exec(word);\n            if (match) {\n                const lineNo = match[1]\n                const text = match[2]\n                addPhraseToVocabulary(text, importedLines, lineNo);\n            } else {\n                addPhraseToVocabulary(word, importedLines);\n            }\n\n            return null;\n        });\n        if(importedLines.size > 0) {\n            let words = [];\n            importedLines.forEach((v, k) => {\n                words.push({ id: uuidv4(), text: k, count: v });\n            });\n            props.setWords(words);\n            props.setIsImportWordsDialogVisible(false);\n            props.setIsContextListVisible(true)\n            window.ga('send', 'event', 'Vocabulary', 'Generated');\n        }\n    }\n\n    function addPhraseToVocabulary(text, importedLines) {\n        const trimmedText = text.trim()\n        if (trimmedText.length  > 0) {\n            if (importedLines.has(text)) {\n                importedLines.set([]);\n            }\n            else {\n                importedLines.set(text, []);\n            }\n        }\n    }\n\n    if (props.isImportWordsDialogVisible) {\n        return (\n            <div className=\"importWordsContentArea\">\n                <div><h2>Getting Started: <a href=\"https://github.com/robertreppel/kubel\" rel=\"noopener noreferrer\" target=\"_blank\">Usage Example/Walk-Through</a></h2></div>\n                <div>\n                    <h4>Paste text here</h4>\n                    <p>Every line of text will be a phrase which can be grouped with other phrases to determine system boundaries based on Ubiquitous Language.</p>\n                </div>\n                <div>\n                    <textarea id=\"sourceText\" style={{ width: \"90vw\" }} rows=\"20\"></textarea>\n                </div>\n                <div>\n                    <button className=\"button commandBtn\" onClick={generateVocabulary}>Generate Vocabulary</button>\n                </div>\n            </div>);\n    }\n    else {\n        return (<React.Fragment />);\n    }\n};\n\n\n\n","import React from 'react';\nimport './BoundedContext.css'\n\nexport const BoundedContext = (props) => {\n  if (props.currentContext && props.currentContext.id === props.context.id) {\n    return (\n      <span className=\"currentContext\" onClick={toggleIsCurrentContext(props)} style={{ backgroundColor: props.context.color }}>\n        {props.context.name}\n      </span>\n    )\n  }\n  return (\n    <span className=\"context\" onClick={toggleIsCurrentContext(props)} style={{ backgroundColor: props.context.color }}>\n      {props.context.name}\n    </span>\n  );\n};\n\nfunction toggleIsCurrentContext(props) {\n  return () => {\n    if (props.currentContext && props.context.id === props.currentContext.id) {\n      props.setCurrentContext(null);\n    } else {\n      props.setCurrentContext(props.context);\n    }\n  };\n}\n\n","import React from 'react';\nimport uuidv4 from 'uuid/v4';\nimport './../../App.css'\n\nexport const NewContext = (props) => {\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  return (<React.Fragment>\n    <span style={{ marginRight: \"10px\" }}><input id=\"newContextName\"></input></span>\n    <span>\n      <button className=\"button commandBtn\" onClick={() => {\n        const contextNameInput = document.getElementById(\"newContextName\");\n        const trimmedContextName = contextNameInput.value.trim()\n        if (trimmedContextName.length > 0) {\n          const newContext = {\n            id: uuidv4(),\n            name: trimmedContextName,\n            color: getRandomColor()\n          };\n          contextNameInput.value = \"\";\n          props.createNewBoundedContext(newContext);\n        }\n      }}>Create</button>\n    </span>\n  </React.Fragment>);\n};\n","import React, { useState, useEffect } from 'react';\nimport { BoundedContext } from \"./BoundedContext\";\nimport { NewContext } from './NewContext';\n\nexport const BoundedContextList = (props) => {\n  window.ga('set', 'page', '/bounded-contexts-page');\n  window.ga('send', 'pageview');\n\n  const contextsFromLocalStorage = JSON.parse(localStorage.getItem(\"contexts\"))\n  const [contexts, setContexts] = useState(contextsFromLocalStorage || []);\n\n\n  function createNewBoundedContext(newContext) {\n    setContexts([...contexts, newContext]);\n    window.ga('send', 'event', 'Context', 'Created');\n  }\n\n  useEffect(() => {\n    const contextJson = JSON.stringify(contexts);\n    localStorage.setItem('contexts', contextJson);\n  }, [contexts]);\n\n  if (!props.isContextListVisible) {\n    return (<React.Fragment />)\n  }\n  return (\n    <div>\n      <div>\n        <span><h4 style={{ display: \"inline-block\", marginRight: \"10px\", color: \" #F8FAFB\" }}>Contexts</h4></span><NewContext createNewBoundedContext={createNewBoundedContext} />\n      </div>\n      {contexts.length === 0 ? <OnboardingInstructions /> :\n        <React.Fragment>\n          <hr style={{ color: \"#F8FAFB\" }} />\n          <div className=\"contextList\">\n            {contexts.map(context => {\n              return (<BoundedContext key={context.id} setCurrentContext={props.setCurrentContext} currentContext={props.currentContext} context={context} />);\n            })}\n          </div>\n        </React.Fragment>\n      }\n    </div>);\n};\n\n\nconst OnboardingInstructions = () => {\n  return (\n    <ol className=\"onboardingText\">\n      <li className=\"onboardingTextLine\">Drag &amp; Drop phrases which belong together into groups. </li>\n      <li className=\"onboardingTextLine\">Create &amp; select bounded contexts.</li>\n      <li className=\"onboardingTextLine\">Click phrases to mark them as belonging to the currently selected context.</li>\n    </ol>\n  )\n}","import React from 'react';\nimport { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nexport const ImportFileDropzone = (props) => {\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader();\n    reader.onabort = () => console.log('file reading was aborted');\n    reader.onerror = () => console.log('file reading has failed');\n    reader.onload = () => {\n      const binaryStr = reader.result;\n      const kubel = JSON.parse(binaryStr);\n      kubel.forEach(item => {\n        localStorage.setItem(item.key, JSON.stringify(item.item));\n      });\n      window.location.reload();\n    };\n    acceptedFiles.forEach(file => reader.readAsBinaryString(file));\n    window.ga('send', 'event', 'Project', 'Imported');\n  }, []);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  if (!props.isFileImportVisible) {\n    return (<React.Fragment />);\n  }\n  return (<div className=\"importFileDropzone\" {...getRootProps()}>\n    <input {...getInputProps()} />\n    <p><strong>Import Project:</strong> Drag 'n' drop a previously exported Kubel file here, or click to select file</p>\n  </div>);\n};\n","import React from 'react';\nimport './Toolbar.css';\n\nexport const Toolbar = (props) => {\n  const createNew = () => {\n    window.ga('set', 'page', '/new-project');\n    window.ga('send', 'pageview');\n    const retVal = window.confirm(\"Creating a new Kubel project will delete everything here.\");\n    window.ga('send', 'event', 'Project', 'Created');\n    if (retVal === true) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  };\n  const exportJson = () => {\n    window.ga('set', 'page', '/export-project');\n    window.ga('send', 'pageview');\n\n    let projectJson = [];\n    for (var key in localStorage) {\n      const item = JSON.parse(localStorage.getItem(key));\n      projectJson.push({ key: key, item: item });\n    }\n    let fileName = window.prompt(\"Export file name:\");\n    if (!fileName) {\n      fileName = \"Untitled\";\n    }\n    if (!fileName.includes(\".\")) {\n      fileName = `${fileName}.json`;\n    }\n    download(JSON.stringify(projectJson), fileName, 'text/json');\n    window.ga('send', 'event', 'Project', 'Exported');\n  };\n\n  function download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  return (<React.Fragment>\n    <div className=\"logoText\"><h2>Kubel</h2></div>\n    <p className=\"navText\">Service Boundary Explorer</p>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={createNew}>\n        New\n      </button>\n    </div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={ props.toggleImportFileDragAreaVisible }>\n        Import\n      </button>\n    </div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={exportJson}>\n        Export\n    </button>\n    </div>\n  </React.Fragment>);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Word } from './features/Grouping/Word';\nimport { ImportWords } from './features/Import/ImportWords';\nimport { BoundedContextList } from './features/BoundedContexts/BoundedContextList';\nimport { ImportFileDropzone } from './features/Import/ImportFileDropzone';\nimport { Toolbar } from './features/Toolbar/Toolbar';\n\nconst App = () => {\n  const [currentContext, setCurrentContext] = useState(null)\n\n  const wordsFromLocalStorage = JSON.parse(localStorage.getItem(\"words\"))\n  const [words, setWords] = useState(wordsFromLocalStorage || [])\n\n  const [isImportWordsDialogVisible, setIsImportWordsDialogVisible] = useState(wordsFromLocalStorage && wordsFromLocalStorage.length > 0 ? false : true)\n  const [isContextListVisible, setIsContextListVisible] = useState(wordsFromLocalStorage && wordsFromLocalStorage.length > 0 ? true : false)\n\n  const [isFileImportVisible, setIsFileImportVisible] = useState(false)\n\n  useEffect(() => {\n    const wordsJson = JSON.stringify(words);\n    localStorage.setItem('words', wordsJson);\n  }, [words]);\n\n  const toggleImportFileDragAreaVisible = () => {\n    window.ga('set', 'page', '/import-project');\n    window.ga('send', 'pageview');\n    setIsFileImportVisible(!isFileImportVisible)\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"forkOnGithub\">\n        <a\n          href=\"https://github.com/robertreppel/kubel\">\n          <img\n            width=\"149\"\n            height=\"149\"\n            src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149\"\n            className=\"attachment-full size-full\"\n            alt=\"Fork me on GitHub\" data-recalc-dims=\"1\" />\n        </a>\n      </div>\n      <div className=\"page\">\n        <div className=\"App-header\">\n          <Toolbar toggleImportFileDragAreaVisible={toggleImportFileDragAreaVisible} />\n        </div>\n        <div style={{ backgroundColor: \"#81A3D9\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n          <BoundedContextList\n            currentContext={currentContext}\n            setCurrentContext={setCurrentContext}\n            isContextListVisible={isContextListVisible}\n          />\n        </div>\n        <div className=\"content\">\n          <ImportFileDropzone isFileImportVisible={isFileImportVisible} />\n          {words.map(((word) => {\n            return (<Word key={word.id} word={word} currentContext={currentContext} />)\n          }))}\n          <ImportWords\n            isImportWordsDialogVisible={isImportWordsDialogVisible}\n            setIsImportWordsDialogVisible={setIsImportWordsDialogVisible}\n            setWords={setWords}\n            setIsContextListVisible={setIsContextListVisible}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'autotrack/lib/plugins/event-tracker';\n\n// Replace UA-XXXXXXXX-X with your own Google Analytics tracking id\nwindow.ga('create', 'UA-129959304-5', 'auto');\n\n// Only require the plugins you've imported above.\nwindow.ga('require', 'eventTracker');\nwindow.ga('send', 'pageview');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}