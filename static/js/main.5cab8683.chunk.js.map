{"version":3,"sources":["Word.js","ImportWords.js","BoundedContext.js","NewContext.js","BoundedContextList.js","ImportFileDropzone.js","Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","dragStateFromLocalStorage","JSON","parse","localStorage","getItem","word","id","_useState","useState","_useState2","Object","slicedToArray","dragState","setDragState","color","_useState3","_useState4","backgroundColor","setBackgroundColor","useEffect","dragStateJson","stringify","setItem","dragHandlers","onDrag","e","position","x","y","objectSpread","posX","posY","xPos","yPos","react_default","a","createElement","react_draggable_default","assign","style","onDoubleClick","onClick","currentContext","className","text","ImportWords","isImportWordsDialogVisible","rows","cols","document","getElementById","value","importedLines","Map","split","map","match","exec","setWord","words","forEach","v","k","push","uuidv4","count","setWords","setIsImportWordsDialogVisible","setIsContextListVisible","Fragment","has","set","BoundedContext","context","toggleIsCurrentContext","name","setCurrentContext","NewContext","getRandomColor","i","Math","floor","random","marginRight","contextNameInput","newContext","createNewBoundedContext","BoundedContextList","contextsFromLocalStorage","contexts","setContexts","contextJson","isContextListVisible","display","NewContext_NewContext","concat","toConsumableArray","BoundedContext_BoundedContext","key","ImportFileDropzone","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","item","window","location","reload","file","readAsBinaryString","_useDropzone","useDropzone","getRootProps","getInputProps","isFileImportVisible","Toolbar","confirm","clear","toggleImportFileDragAreaVisible","projectJson","fileName","prompt","includes","content","contentType","Blob","type","href","URL","createObjectURL","download","click","App","wordsFromLocalStorage","_useState5","length","_useState6","_useState7","_useState8","_useState9","_useState10","setIsFileImportVisible","wordsJson","top","right","width","height","src","alt","data-recalc-dims","Toolbar_Toolbar","ImportFileDropzone_ImportFileDropzone","BoundedContextList_BoundedContextList","Word_Word","ImportWords_ImportWords","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cab8683.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Draggable from 'react-draggable';\n\nexport const Word = (props) => {\n  const dragStateFromLocalStorage = JSON.parse(localStorage.getItem(props.word.id))\n  const [dragState, setDragState] = useState(dragStateFromLocalStorage || {})\n  \n  const color = dragState.color ? dragState.color : \"white\"\n  const [backgroundColor, setBackgroundColor] = useState(color)\n\n  const onDrag = (e, position) => {\n    const { x, y } = position;\n    setDragState({ ...dragState, posX: x, posY: y, word: props })\n  }\n\n  useEffect(() => {\n    const dragStateJson = JSON.stringify(dragState);\n    localStorage.setItem(props.word.id, dragStateJson);\n  }, [dragState, props.word.id]);\n\n  const dragHandlers = { onDrag: onDrag };\n\n  const xPos = dragState.posX ? dragState.posX : 0\n  const yPos = dragState.posY ? dragState.posY : 0\n  return (<Draggable\n    {...dragHandlers}\n    position={{ x: xPos, y: yPos }}\n  >\n    <div\n      style={{ backgroundColor: backgroundColor }}\n      onDoubleClick={ () => {\n        const defaultColor = \"white\";\n        setBackgroundColor(defaultColor)\n        setDragState({ ...dragState, color: defaultColor.color })\n      }}\n\n      onClick={() => {\n        if (props.currentContext) {\n          setBackgroundColor(props.currentContext.color)\n          setDragState({ ...dragState, color: props.currentContext.color })\n        }\n      }\n      }\n      className=\"box\"\n    >{props.word.text}</div>\n  </Draggable>);\n};\n","import React from 'react';\nimport uuidv4 from 'uuid/v4';\n\nexport const ImportWords = (props) => {\n\n    const importWords = () => {\n        const text = document.getElementById(\"importedWords\").value;\n        let importedLines = new Map();\n        text.split(\"\\n\").map((word) => {\n            const myRegexp = /^(\\d*):(.*)/;\n            const match = myRegexp.exec(word);\n            if(match) {\n                const lineNo = match[1]\n                const text = match[2]\n                setWord(text, importedLines, lineNo);\n            } else {\n                setWord(word, importedLines);\n            }\n\n            return null;\n        });\n        let words = [];\n        importedLines.forEach((v, k) => {\n            words.push({ id: uuidv4(), text: k, count: v });\n        });\n        props.setWords(words);\n        props.setIsImportWordsDialogVisible(false);\n        props.setIsContextListVisible(true)\n    }\n\n    if (props.isImportWordsDialogVisible) {\n        return (<div>\n            <h4>Paste text here</h4>\n            <p>Every line of text will be a phrase which can be grouped with other phrases to determine system boundaries based on Ubiquitous Language.</p>\n            <div>\n                <textarea id=\"importedWords\" rows={20} cols={50}></textarea>\n            </div>\n            <div>\n                <button onClick={importWords}>Generate Vocabulary</button>\n            </div>\n        </div>);\n    }\n    else {\n        return (<React.Fragment />);\n    }\n};\n\nfunction setWord(text, importedLines) {\n    if (text) {\n        if (importedLines.has(text)) {\n            importedLines.set([]);\n        }\n        else {\n            importedLines.set(text, []);\n        }\n    }\n}\n\n","import React from 'react';\nexport const BoundedContext = (props) => {\n  if (props.currentContext && props.currentContext.id === props.context.id) {\n    return (\n      <span className=\"currentContext\" onClick={toggleIsCurrentContext(props)} style={{ backgroundColor: props.context.color }}>\n        {props.context.name}\n      </span>\n    )\n  }\n  return (\n    <span className=\"context\" onClick={toggleIsCurrentContext(props)} style={{ backgroundColor: props.context.color }}>\n      {props.context.name}\n    </span>\n  );\n};\n\nfunction toggleIsCurrentContext(props) {\n  return () => {\n    if (props.currentContext && props.context.id === props.currentContext.id) {\n      props.setCurrentContext(null);\n    } else {\n      props.setCurrentContext(props.context);\n    }\n  };\n}\n\n","import React from 'react';\nimport uuidv4 from 'uuid/v4';\n\nexport const NewContext = (props) => {\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  return (<React.Fragment>\n    <span style={{ marginRight: \"10px\" }}><input id=\"newContextName\"></input></span>\n    <span>\n      <button onClick={() => {\n        const contextNameInput = document.getElementById(\"newContextName\");\n        const newContext = {\n          id: uuidv4(),\n          name: contextNameInput.value,\n          color: getRandomColor()\n        };\n        contextNameInput.value = \"\";\n        props.createNewBoundedContext(newContext);\n      }}>New</button>\n    </span>\n  </React.Fragment>);\n};\n","import React, { useState, useEffect } from 'react';\nimport { BoundedContext } from \"./BoundedContext\";\nimport { NewContext } from './NewContext';\n\nexport const BoundedContextList = (props) => {\n  const contextsFromLocalStorage = JSON.parse(localStorage.getItem(\"contexts\"))\n  const [contexts, setContexts] = useState(contextsFromLocalStorage || []);\n\n\n  function createNewBoundedContext(newContext) {\n    setContexts([...contexts, newContext]);\n  }\n\n\n  useEffect(() => {\n    const contextJson = JSON.stringify(contexts);\n    localStorage.setItem('contexts', contextJson);\n  }, [contexts]);\n\n  if (!props.isContextListVisible) {\n    return (<React.Fragment />)\n  }\n  return (\n    <div>\n      <div>\n        <span><h4 style={{ display: \"inline-block\", marginRight: \"10px\" }}>Bounded Contexts</h4></span><NewContext createNewBoundedContext={createNewBoundedContext} />\n      </div>\n      <div className=\"contextList\">\n        {contexts.map(context => {\n          return (<BoundedContext key={context.id} setCurrentContext={props.setCurrentContext} currentContext={props.currentContext} context={context} />);\n        })}\n      </div>\n      <hr />\n    </div>);\n};\n\n\n\n","import React from 'react';\nimport { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nexport const ImportFileDropzone = (props) => {\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader();\n    reader.onabort = () => console.log('file reading was aborted');\n    reader.onerror = () => console.log('file reading has failed');\n    reader.onload = () => {\n      const binaryStr = reader.result;\n      const kubel = JSON.parse(binaryStr);\n      kubel.forEach(item => {\n        localStorage.setItem(item.key, JSON.stringify(item.item));\n      });\n      window.location.reload();\n    };\n    acceptedFiles.forEach(file => reader.readAsBinaryString(file));\n  }, []);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  if (!props.isFileImportVisible) {\n    return (<React.Fragment />);\n  }\n  return (<div className=\"importFileDropzone\" {...getRootProps()}>\n    <input {...getInputProps()} />\n    <p>Drag 'n' drop a file here, or click to select files</p>\n  </div>);\n};\n","import React from 'react';\nimport './Toolbar.css';\n\nexport const Toolbar = (props) => {\n  const createNew = () => {\n    const retVal = window.confirm(\"Creating a new Kubel will delete everything here.\");\n    if (retVal === true) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  };\n  const exportJson = () => {\n    let projectJson = [];\n    for (var key in localStorage) {\n      const item = JSON.parse(localStorage.getItem(key));\n      projectJson.push({ key: key, item: item });\n    }\n    let fileName = window.prompt(\"Export As:\");\n    if (!fileName) {\n      fileName = \"Untitled\";\n    }\n    if (!fileName.includes(\".\")) {\n      fileName = `${fileName}.json`;\n    }\n    download(JSON.stringify(projectJson), fileName, 'text/json');\n  };\n  function download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n  return (<React.Fragment>\n    <div className=\"logoText\"><h2>Kubel</h2></div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={createNew}>\n        New\n      </button>\n    </div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={ props.toggleImportFileDragAreaVisible }>\n        Import\n      </button>\n    </div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={exportJson}>\n        Export\n    </button>\n    </div>\n  </React.Fragment>);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Word } from './Word';\nimport { ImportWords } from './ImportWords';\nimport { BoundedContextList } from './BoundedContextList';\nimport { ImportFileDropzone } from './ImportFileDropzone';\nimport { Toolbar } from './Toolbar';\n\nconst App = () => {\n  const [currentContext, setCurrentContext] = useState(null)\n\n  const wordsFromLocalStorage = JSON.parse(localStorage.getItem(\"words\"))\n  const [words, setWords] = useState(wordsFromLocalStorage || [])\n\n  const [isImportWordsDialogVisible, setIsImportWordsDialogVisible] = useState(wordsFromLocalStorage && wordsFromLocalStorage.length > 0 ? false : true)\n  const [isContextListVisible, setIsContextListVisible] = useState(wordsFromLocalStorage && wordsFromLocalStorage.length > 0 ? true : false)\n\n  const [isFileImportVisible, setIsFileImportVisible] = useState(false)\n\n  useEffect(() => {\n    const wordsJson = JSON.stringify(words);\n    localStorage.setItem('words', wordsJson);\n  }, [words]);\n\n  const toggleImportFileDragAreaVisible = () => {\n    setIsFileImportVisible(!isFileImportVisible)\n  }\n\n  return (\n    <React.Fragment>\n      <div>\n        <a\n          href=\"https://github.com/robertreppel/kubel\">\n          <img\n            style={{ position: \"absolute\", top: 0, right: 0 }}\n            width=\"149\"\n            height=\"149\"\n            src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149\"\n            className=\"attachment-full size-full\"\n            alt=\"Fork me on GitHub\" data-recalc-dims=\"1\" />\n        </a>\n      </div>    <div className=\"page\">\n        <div className=\"App-header\">\n          <Toolbar toggleImportFileDragAreaVisible={toggleImportFileDragAreaVisible} />\n        </div>\n        <hr />\n        <ImportFileDropzone isFileImportVisible={isFileImportVisible}  />\n        <BoundedContextList\n          currentContext={currentContext}\n          setCurrentContext={setCurrentContext}\n          isContextListVisible={isContextListVisible}\n        />\n        {words.map(((word) => {\n          return (<Word key={word.id} word={word} currentContext={currentContext} />)\n        }))}\n        <ImportWords\n          isImportWordsDialogVisible={isImportWordsDialogVisible}\n          setIsImportWordsDialogVisible={setIsImportWordsDialogVisible}\n          setWords={setWords}\n          setIsContextListVisible={setIsContextListVisible}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}