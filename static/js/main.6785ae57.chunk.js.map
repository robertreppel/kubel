{"version":3,"sources":["features/Grouping/Word.js","features/Import/ImportWords.js","features/BoundedContexts/BoundedContext.js","features/BoundedContexts/NewContext.js","features/BoundedContexts/BoundedContextList.js","features/Import/ImportFileDropzone.js","features/Toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Word","props","dragStateFromLocalStorage","JSON","parse","localStorage","getItem","word","id","_useState","useState","_useState2","Object","slicedToArray","dragState","setDragState","color","_useState3","_useState4","backgroundColor","setBackgroundColor","useEffect","dragStateJson","stringify","setItem","dragHandlers","onDrag","e","position","x","y","objectSpread","posX","posY","xPos","yPos","react_default","a","createElement","react_draggable_default","assign","className","style","padding","onDoubleClick","onClick","currentContext","text","ImportWords","addPhraseToVocabulary","importedLines","trim","length","has","set","isImportWordsDialogVisible","href","target","width","rows","document","getElementById","value","Map","split","map","match","exec","size","words","forEach","v","k","push","uuidv4","count","setWords","setIsImportWordsDialogVisible","setIsContextListVisible","Fragment","BoundedContext","context","toggleIsCurrentContext","name","setCurrentContext","NewContext","getRandomColor","i","Math","floor","random","marginRight","contextNameInput","trimmedContextName","newContext","createNewBoundedContext","BoundedContextList","contextsFromLocalStorage","contexts","setContexts","contextJson","isContextListVisible","display","NewContext_NewContext","concat","toConsumableArray","BoundedContextList_OnboardingInstructions","BoundedContext_BoundedContext","key","OnboardingInstructions","ImportFileDropzone","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","item","window","location","reload","file","readAsBinaryString","_useDropzone","useDropzone","getRootProps","getInputProps","isFileImportVisible","Toolbar","confirm","clear","toggleImportFileDragAreaVisible","projectJson","fileName","prompt","includes","content","contentType","Blob","type","URL","createObjectURL","download","click","App","wordsFromLocalStorage","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","setIsFileImportVisible","wordsJson","height","src","alt","data-recalc-dims","Toolbar_Toolbar_Toolbar","paddingLeft","paddingRight","BoundedContextList_BoundedContextList","ImportFileDropzone_ImportFileDropzone","Word_Word","ImportWords_ImportWords","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6785ae57.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Draggable from 'react-draggable';\n\nexport const Word = (props) => {\n  const dragStateFromLocalStorage = JSON.parse(localStorage.getItem(props.word.id))\n  const [dragState, setDragState] = useState(dragStateFromLocalStorage || {})\n\n  const color = dragState.color ? dragState.color : \"white\"\n  const [backgroundColor, setBackgroundColor] = useState(color)\n\n  const onDrag = (e, position) => {\n    const { x, y } = position;\n    setDragState({ ...dragState, posX: x, posY: y, word: props })\n  }\n\n  useEffect(() => {\n    const dragStateJson = JSON.stringify(dragState);\n    localStorage.setItem(props.word.id, dragStateJson);\n  }, [dragState, props.word.id]);\n\n  const dragHandlers = { onDrag: onDrag };\n\n  const xPos = dragState.posX ? dragState.posX : 0\n  const yPos = dragState.posY ? dragState.posY : 0\n\n  const colorizeWithColorOfBoundedContext = () => {\n    if (props.currentContext) {\n      setBackgroundColor(props.currentContext.color);\n      setDragState({ ...dragState, color: props.currentContext.color });\n    }\n  };\n\n  const resetToDefaultColor = () => {\n    const defaultColor = \"white\";\n    setBackgroundColor(defaultColor);\n    setDragState({ ...dragState, color: defaultColor.color });\n  };\n\n  return (<Draggable\n    {...dragHandlers}\n    position={{ x: xPos, y: yPos }}\n  >\n    <div\n      className=\"vocabulary\"\n      style={{ backgroundColor: backgroundColor, color: \"black\", padding: \"3px\" }}\n      onDoubleClick={resetToDefaultColor}\n\n      onClick={colorizeWithColorOfBoundedContext\n      }\n    >{props.word.text}</div>\n  </Draggable>);\n};\n","import React from 'react';\nimport uuidv4 from 'uuid/v4';\nimport './ImportWords.css';\n\nexport const ImportWords = (props) => {\n\n    const doImport = () => {\n        const text = document.getElementById(\"importedWords\").value;\n        let importedLines = new Map();\n        text.split(\"\\n\").map((word) => {\n            const myRegexp = /^(\\d*):(.*)/;\n            const match = myRegexp.exec(word);\n            if (match) {\n                const lineNo = match[1]\n                const text = match[2]\n                addPhraseToVocabulary(text, importedLines, lineNo);\n            } else {\n                addPhraseToVocabulary(word, importedLines);\n            }\n\n            return null;\n        });\n        if(importedLines.size > 0) {\n            let words = [];\n            importedLines.forEach((v, k) => {\n                words.push({ id: uuidv4(), text: k, count: v });\n            });\n            props.setWords(words);\n            props.setIsImportWordsDialogVisible(false);\n            props.setIsContextListVisible(true)\n        }\n    }\n\n    function addPhraseToVocabulary(text, importedLines) {\n        const trimmedText = text.trim()\n        if (trimmedText.length  > 0) {\n            if (importedLines.has(text)) {\n                importedLines.set([]);\n            }\n            else {\n                importedLines.set(text, []);\n            }\n        }\n    }\n\n    if (props.isImportWordsDialogVisible) {\n        return (\n            <div className=\"importWordsContentArea\">\n                <div><h2>Getting Started: <a href=\"https://github.com/robertreppel/kubel\" target=\"_blank\">Usage Example/Walk-Through</a></h2></div>\n                <div>\n                    <h4>Paste text here</h4>\n                    <p>Every line of text will be a phrase which can be grouped with other phrases to determine system boundaries based on Ubiquitous Language.</p>\n                </div>\n                <div>\n                    <textarea id=\"importedWords\" style={{ width: \"90vw\" }} rows=\"20\"></textarea>\n                </div>\n                <div>\n                    <button className=\"button commandBtn\" onClick={doImport}>Generate Vocabulary</button>\n                </div>\n            </div>);\n    }\n    else {\n        return (<React.Fragment />);\n    }\n};\n\n\n\n","import React from 'react';\nimport './BoundedContext.css'\n\nexport const BoundedContext = (props) => {\n  if (props.currentContext && props.currentContext.id === props.context.id) {\n    return (\n      <span className=\"currentContext\" onClick={toggleIsCurrentContext(props)} style={{ backgroundColor: props.context.color }}>\n        {props.context.name}\n      </span>\n    )\n  }\n  return (\n    <span className=\"context\" onClick={toggleIsCurrentContext(props)} style={{ backgroundColor: props.context.color }}>\n      {props.context.name}\n    </span>\n  );\n};\n\nfunction toggleIsCurrentContext(props) {\n  return () => {\n    if (props.currentContext && props.context.id === props.currentContext.id) {\n      props.setCurrentContext(null);\n    } else {\n      props.setCurrentContext(props.context);\n    }\n  };\n}\n\n","import React from 'react';\nimport uuidv4 from 'uuid/v4';\nimport './../../App.css'\n\nexport const NewContext = (props) => {\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  return (<React.Fragment>\n    <span style={{ marginRight: \"10px\" }}><input id=\"newContextName\"></input></span>\n    <span>\n      <button className=\"button commandBtn\" onClick={() => {\n        const contextNameInput = document.getElementById(\"newContextName\");\n        const trimmedContextName = contextNameInput.value.trim()\n        if (trimmedContextName.length > 0) {\n          const newContext = {\n            id: uuidv4(),\n            name: trimmedContextName,\n            color: getRandomColor()\n          };\n          contextNameInput.value = \"\";\n          props.createNewBoundedContext(newContext);\n        }\n      }}>Create</button>\n    </span>\n  </React.Fragment>);\n};\n","import React, { useState, useEffect } from 'react';\nimport { BoundedContext } from \"./BoundedContext\";\nimport { NewContext } from './NewContext';\n\nexport const BoundedContextList = (props) => {\n  const contextsFromLocalStorage = JSON.parse(localStorage.getItem(\"contexts\"))\n  const [contexts, setContexts] = useState(contextsFromLocalStorage || []);\n\n\n  function createNewBoundedContext(newContext) {\n    setContexts([...contexts, newContext]);\n  }\n\n  useEffect(() => {\n    const contextJson = JSON.stringify(contexts);\n    localStorage.setItem('contexts', contextJson);\n  }, [contexts]);\n\n  if (!props.isContextListVisible) {\n    return (<React.Fragment />)\n  }\n  return (\n    <div>\n      <div>\n        <span><h4 style={{ display: \"inline-block\", marginRight: \"10px\", color: \" #F8FAFB\" }}>Contexts</h4></span><NewContext createNewBoundedContext={createNewBoundedContext} />\n      </div>\n      {contexts.length === 0 ? <OnboardingInstructions /> :\n        <React.Fragment>\n          <hr style={{ color: \"#F8FAFB\" }} />\n          <div className=\"contextList\">\n            {contexts.map(context => {\n              return (<BoundedContext key={context.id} setCurrentContext={props.setCurrentContext} currentContext={props.currentContext} context={context} />);\n            })}\n          </div>\n        </React.Fragment>\n      }\n    </div>);\n};\n\n\nconst OnboardingInstructions = () => {\n  return (\n    <ol className=\"onboardingText\">\n      <li className=\"onboardingTextLine\">Drag &amp; Drop terms which belong together into groups. </li>\n      <li className=\"onboardingTextLine\">Create &amp; select bounded contexts.</li>\n      <li className=\"onboardingTextLine\">Click terms to mark them as belonging to the currently selected context.</li>\n    </ol>\n  )\n}","import React from 'react';\nimport { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nexport const ImportFileDropzone = (props) => {\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader();\n    reader.onabort = () => console.log('file reading was aborted');\n    reader.onerror = () => console.log('file reading has failed');\n    reader.onload = () => {\n      const binaryStr = reader.result;\n      const kubel = JSON.parse(binaryStr);\n      kubel.forEach(item => {\n        localStorage.setItem(item.key, JSON.stringify(item.item));\n      });\n      window.location.reload();\n    };\n    acceptedFiles.forEach(file => reader.readAsBinaryString(file));\n  }, []);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  if (!props.isFileImportVisible) {\n    return (<React.Fragment />);\n  }\n  return (<div className=\"importFileDropzone\" {...getRootProps()}>\n    <input {...getInputProps()} />\n    <p>Drag 'n' drop a file here, or click to select files</p>\n  </div>);\n};\n","import React from 'react';\nimport './Toolbar.css';\n\nexport const Toolbar = (props) => {\n  const createNew = () => {\n    const retVal = window.confirm(\"Creating a new Kubel will delete everything here.\");\n    if (retVal === true) {\n      localStorage.clear();\n      window.location.reload();\n    }\n  };\n  const exportJson = () => {\n    let projectJson = [];\n    for (var key in localStorage) {\n      const item = JSON.parse(localStorage.getItem(key));\n      projectJson.push({ key: key, item: item });\n    }\n    let fileName = window.prompt(\"Export As:\");\n    if (!fileName) {\n      fileName = \"Untitled\";\n    }\n    if (!fileName.includes(\".\")) {\n      fileName = `${fileName}.json`;\n    }\n    download(JSON.stringify(projectJson), fileName, 'text/json');\n  };\n  function download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n  return (<React.Fragment>\n    <div className=\"logoText\"><h2>Kubel</h2></div>\n    <p className=\"navText\">Service Boundary Explorer</p>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={createNew}>\n        New\n      </button>\n    </div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={ props.toggleImportFileDragAreaVisible }>\n        Import\n      </button>\n    </div>\n    <div className=\"menuItem\">\n      <button className=\"menu\" onClick={exportJson}>\n        Export\n    </button>\n    </div>\n  </React.Fragment>);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Word } from './features/Grouping/Word';\nimport { ImportWords } from './features/Import/ImportWords';\nimport { BoundedContextList } from './features/BoundedContexts/BoundedContextList';\nimport { ImportFileDropzone } from './features/Import/ImportFileDropzone';\nimport { Toolbar } from './features/Toolbar/Toolbar';\n\nconst App = () => {\n  const [currentContext, setCurrentContext] = useState(null)\n\n  const wordsFromLocalStorage = JSON.parse(localStorage.getItem(\"words\"))\n  const [words, setWords] = useState(wordsFromLocalStorage || [])\n\n  const [isImportWordsDialogVisible, setIsImportWordsDialogVisible] = useState(wordsFromLocalStorage && wordsFromLocalStorage.length > 0 ? false : true)\n  const [isContextListVisible, setIsContextListVisible] = useState(wordsFromLocalStorage && wordsFromLocalStorage.length > 0 ? true : false)\n\n  const [isFileImportVisible, setIsFileImportVisible] = useState(false)\n\n  useEffect(() => {\n    const wordsJson = JSON.stringify(words);\n    localStorage.setItem('words', wordsJson);\n  }, [words]);\n\n  const toggleImportFileDragAreaVisible = () => {\n    setIsFileImportVisible(!isFileImportVisible)\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"forkOnGithub\">\n        <a\n          href=\"https://github.com/robertreppel/kubel\">\n          <img\n            width=\"149\"\n            height=\"149\"\n            src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149\"\n            className=\"attachment-full size-full\"\n            alt=\"Fork me on GitHub\" data-recalc-dims=\"1\" />\n        </a>\n      </div>\n      <div className=\"page\">\n        <div className=\"App-header\">\n          <Toolbar toggleImportFileDragAreaVisible={toggleImportFileDragAreaVisible} />\n        </div>\n        <div style={{ backgroundColor: \"#81A3D9\", paddingLeft: \"10px\", paddingRight: \"10px\"}}>\n          <BoundedContextList\n            currentContext={currentContext}\n            setCurrentContext={setCurrentContext}\n            isContextListVisible={isContextListVisible}\n          />\n        </div>\n        <div className=\"content\">\n          <ImportFileDropzone isFileImportVisible={isFileImportVisible} />\n          {words.map(((word) => {\n            return (<Word key={word.id} word={word} currentContext={currentContext} />)\n          }))}\n          <ImportWords\n            isImportWordsDialogVisible={isImportWordsDialogVisible}\n            setIsImportWordsDialogVisible={setIsImportWordsDialogVisible}\n            setWords={setWords}\n            setIsContextListVisible={setIsContextListVisible}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}